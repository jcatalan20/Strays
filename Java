import java.util.*;

public class AlleyCats {
    private static final int MAX_CATS = 10;
    private static final int MAX_PEOPLE = 5;
    private static final int MAX_RATS = 3;

    public static void main(String[] args) {
        // Initialize cats, people, and rats
        List<Cat> cats = new ArrayList<>();
        for (int i = 0; i < MAX_CATS; i++) {
            cats.add(new Cat());
        }
        List<Person> people = new ArrayList<>();
        for (int i = 0; i < MAX_PEOPLE; i++) {
            people.add(new Person());
        }
        List<Rat> rats = new ArrayList<>();
        for (int i = 0; i < MAX_RATS; i++) {
            rats.add(new Rat());
        }

        // Set up territories
        Map<Territory, List<Entity>> territoryEntities = new HashMap<>();
        Territory centralPark = new Territory("Central Park");
        territoryEntities.put(centralPark, Arrays.asList(cats.get(0), cats.get(1), people.get(0)));
        Territory alleys = new Territory("Alleys");
        territoryEntities.put(alleys, Arrays.asList(cats.subList(2, 5), people.subList(1, 3), rats.subList(0, 2)));
        Territory streets = new Territory("Streets");
        territoryEntities.put(streets, Arrays.asList(people.subList(3, 5), rats.subList(2, 3)));

        // Set up relationships between entities
        for (Cat cat : cats) {
            cat.setFriends(Arrays.asList(cat));
            cat.setEnemies(Arrays.asList(people.stream().filter(person -> person != null && !person.isFriend(cat)).findFirst().orElse(null), rats.stream().filter(rat -> rat != null && !rat.isFriend(cat)).findFirst().orElse(null)));
        }
        for (Person person : people) {
            person.setFriends(Arrays.asList(person));
            person.setEnemies(Arrays.asList(cats.stream().filter(cat -> cat != null && !cat.isFriend(person)).findFirst().orElse(null), rats.stream().filter(rat -> rat != null && !rat.isFriend(person)).findFirst().orElse(null)));
        }
        for (Rat rat : rats) {
            rat.setFriends(Arrays.asList(rat));
            rat.setEnemies(Arrays.asList(cats.stream().filter(cat -> cat != null && !cat.isFriend(rat)).findFirst().orElse(null), people.stream().filter(person -> person != null && !person.isFriend(rat)).findFirst().orElse(null)));
        }

        // Start simulation
        boolean running = true;
        while (running) {
            System.out.println("--- Turn ---");
            for (Territory territory : territoryEntities.keySet()) {
                List<Entity> entities = territoryEntities.get(territory);
                for (Entity entity : entities) {
                    entity.act();
                }
            }
            for (Cat cat : cats) {
                if (cat.getHealth() <= 0) {
                    System.out.println("Cat " + cat.getName() + " has died.");
                    running = false;
                break;
                }
            }
            for (Person person : people) {
                if (person.getHealth() <= 0) {
                    System.out.println("Person " + person.getName() + " has died.");
                    running = false;
                    break;
                }
            }
            for (Rat rat : rats) {
                if (rat.getHealth() <= 0) {
                    System.out.println("Rat " + rat.getName() + " has died.");
                    running = false;
                    break;
                }
            }
        }
    }
}

class Entity {
    private String name;
    private int health;
    private List<Entity> friends;
    private List<Entity> enemies;

    public Entity(String name, int health) {
        this.name = name;
        this.health = health;
        this.friends = new ArrayList<>();
        this.enemies = new ArrayList<>();
    }

    public void act() {
        // Do nothing by default
    }

    public void setFriends(List<Entity> friends) {
        this.friends = friends;
    }

    public void setEnemies(List<Entity> enemies) {
        this.enemies = enemies;
    }

    public String getName() {
        return name;
    }

    public int getHealth() {
        return health;
    }

    public List<Entity> getFriends() {
        return friends;
    }

    public List<Entity> getEnemies() {
        return enemies;
    }
}

class Cat extends Entity {
    public Cat() {
        super("Cat", 100);
    }

    @Override
    public void act() {
        // Check for nearby enemies and attack them
        for (Entity enemy : enemies) {
            if (enemy instanceof Person || enemy instanceof Rat) {
                System.out.println(name + " attacks " + enemy.name);
                enemy.setHealth(Math.max(0, enemy.getHealth() - 50));
            }
        }
    }
}

class Person extends Entity {
    public Person() {
        super("Person", 100);
    }

    @Override
    public void act() {
        // Check for nearby enemies and attack them
        for (Entity enemy : enemies) {
            if (enemy instanceof Cat || enemy instanceof Rat) {
                System.out.println(name + " attacks " + enemy.name);
                enemy.setHealth(Math.max(0, enemy.getHealth() - 50));
            }
        }
    }
}

class Rat extends Entity {
    public Rat() {
        super("Rat", 50);
    }

    @Override
    public void act() {
        // Scavenge for food
        System.out.println(name + " scavenges for food.");
        health += 25;
        if (health > 100) {
            health = 100;
        }
    }
}

class Territory {
    private String name;
    private List<Entity> entities;

    public Territory(String name) {
        this.name = name;
        this.entities = new ArrayList<>();
    }

    public void addEntity(Entity entity) {
        entities.add(entity);
    }

    public List<Entity> getEntities() {
        return entities;
    }

    public String getName() {
        return name;
    }
}
